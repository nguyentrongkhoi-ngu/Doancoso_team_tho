const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixWrongBrands() {
  try {
    console.log('üîß S·ª≠a brand sai...\n');

    // ƒê·ªãnh nghƒ©a c√°c s·ª≠a ch·ªØa c·∫ßn thi·∫øt
    const fixes = [
      {
        nameContains: 'Samsung Galaxy Watch',
        correctBrand: 'Samsung',
        reason: 'Samsung Galaxy Watch ph·∫£i l√† Samsung, kh√¥ng ph·∫£i Apple'
      },
      {
        nameContains: 'Huawei Watch GT 5',
        correctBrand: 'Huawei', 
        reason: 'Huawei Watch ph·∫£i l√† Huawei, kh√¥ng ph·∫£i Apple'
      }
    ];

    console.log('üìã C√°c s·ª≠a ch·ªØa s·∫Ω th·ª±c hi·ªán:');
    
    for (const fix of fixes) {
      // T√¨m s·∫£n ph·∫©m c·∫ßn s·ª≠a
      const products = await prisma.product.findMany({
        where: {
          name: { contains: fix.nameContains }
        },
        select: { id: true, name: true, brand: true }
      });

      console.log(`\nüîç T√¨m ki·∫øm: "${fix.nameContains}"`);
      console.log(`  T√¨m th·∫•y ${products.length} s·∫£n ph·∫©m:`);
      
      for (const product of products) {
        console.log(`    - ${product.name}`);
        console.log(`      Brand hi·ªán t·∫°i: ${product.brand}`);
        console.log(`      Brand ƒë√∫ng: ${fix.correctBrand}`);
        
        if (product.brand !== fix.correctBrand) {
          console.log(`      ‚ö†Ô∏è C·∫ßn s·ª≠a: ${product.brand} ‚Üí ${fix.correctBrand}`);
          
          // Th·ª±c hi·ªán s·ª≠a
          await prisma.product.update({
            where: { id: product.id },
            data: { brand: fix.correctBrand }
          });
          
          console.log(`      ‚úÖ ƒê√£ s·ª≠a th√†nh c√¥ng!`);
        } else {
          console.log(`      ‚úÖ Brand ƒë√£ ƒë√∫ng`);
        }
      }
    }

    console.log('\nüéâ Ho√†n th√†nh s·ª≠a brand sai!');

  } catch (error) {
    console.error('‚ùå L·ªói khi s·ª≠a brand:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixWrongBrands();
